{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PabloMachado\\\\Desktop\\\\brc\\\\dlsc\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { Container, Switch } from '@mui/material';\nimport { grey } from \"@mui/material/colors\";\nimport { withStyles } from \"@mui/styles\";\nimport Header from \"./components/Header/Header\";\nimport Definitions from \"./components/Definitions/Definitions\";\nimport Footer from \"./components/Footer/Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [word, setWord] = useState(\"\");\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightTheme, setLightTheme] = useState(false);\n\n  const dictionaryApi = async () => {\n    try {\n      //get data for a specific word in a specific language using axios\n      const data = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`); //extract data from the recieved object and set meanings\n\n      setMeanings(data.data);\n    } catch (error) {\n      console.error();\n    }\n  }; //renders when the component is mounted \n\n\n  useEffect(() => {\n    dictionaryApi(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [word, category]); //switch\n\n  const DarkMode = withStyles({\n    switchBase: {\n      color: grey[50],\n      \"&$checked\": {\n        color: grey[900]\n      },\n      \"&$checked + $track\": {\n        backgroundColor: grey[500]\n      }\n    },\n    checked: {},\n    track: {}\n  })(Switch);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: \"100vh\",\n      backgroundColor: LightTheme ? \"#fff\" : \"#282c34\",\n      color: LightTheme ? \"black\" : \"white\",\n      transition: \"all 0.5s linear\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          right: 15,\n          paddingTop: 10,\n          justifyContent: \"space-evenly\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [LightTheme ? \"Dark\" : \"Light\", \" Mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DarkMode, {\n          checked: LightTheme,\n          onChange: () => setLightTheme(!LightTheme)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        category: category,\n        setCategory: setCategory,\n        word: word,\n        setWord: setWord,\n        LightTheme: LightTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), meanings && /*#__PURE__*/_jsxDEV(Definitions, {\n        word: word,\n        category: category,\n        meanings: meanings,\n        LightTheme: LightTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ISDamKZhk2bkluprXccCqXOTRUc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/PabloMachado/Desktop/brc/dlsc/src/App.js"],"names":["axios","useEffect","useState","Container","Switch","grey","withStyles","Header","Definitions","Footer","App","word","setWord","meanings","setMeanings","category","setCategory","LightTheme","setLightTheme","dictionaryApi","data","get","error","console","DarkMode","switchBase","color","backgroundColor","checked","track","height","transition","display","flexDirection","position","top","right","paddingTop","justifyContent"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport { Container, Switch } from '@mui/material';\r\nimport { grey } from \"@mui/material/colors\";\r\nimport { withStyles } from \"@mui/styles\";\r\n\r\nimport Header from \"./components/Header/Header\";\r\nimport Definitions from \"./components/Definitions/Definitions\";\r\nimport Footer from \"./components/Footer/Footer\";\r\n\r\nfunction App() {\r\n  const [word, setWord] = useState(\"\");\r\n  const [meanings, setMeanings] = useState([]);\r\n  const [category, setCategory] = useState(\"en\");\r\n  const [LightTheme, setLightTheme] = useState(false);\r\n\r\n  const dictionaryApi = async()=>{\r\n    try{\r\n      //get data for a specific word in a specific language using axios\r\n      const data = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`)\r\n      //extract data from the recieved object and set meanings\r\n      setMeanings(data.data);\r\n    }catch(error){console.error();}\r\n  };\r\n  //renders when the component is mounted \r\n  useEffect(() =>{\r\n    dictionaryApi();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [word, category]);\r\n\r\n  //switch\r\n  const DarkMode = withStyles({\r\n    switchBase: {\r\n      color: grey[50],\r\n      \"&$checked\": {\r\n        color: grey[900],\r\n      },\r\n      \"&$checked + $track\": {\r\n        backgroundColor: grey[500],\r\n      },\r\n    },\r\n    checked: {},\r\n    track: {},\r\n  })(Switch);\r\n\r\n  return (\r\n    <div className=\"App\" \r\n    style={{\r\n      height: \"100vh\", \r\n      backgroundColor: LightTheme ? \"#fff\" : \"#282c34\",\r\n      color: LightTheme ? \"black\" : \"white\",\r\n      transition: \"all 0.5s linear\",\r\n    }}>\r\n      <Container \r\n      maxWidth=\"md\"\r\n      style={{display:\"flex\", flexDirection:\"column\", height:\"100vh\"}}\r\n      >\r\n         <div\r\n          style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10, justifyContent:\"space-evenly\" }}\r\n        >\r\n          <span>{LightTheme ? \"Dark\" : \"Light\"} Mode</span>\r\n          <DarkMode\r\n            checked={LightTheme}\r\n            onChange={() => setLightTheme(!LightTheme)}\r\n          />\r\n        </div> \r\n        <Header \r\n        category={category} \r\n        setCategory={setCategory} \r\n        word={word} \r\n        setWord={setWord}\r\n        LightTheme={LightTheme}/>\r\n        {meanings && \r\n          <Definitions word={word} category={category} meanings={meanings} LightTheme={LightTheme}/>\r\n        }\r\n        <Footer/>\r\n        </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}